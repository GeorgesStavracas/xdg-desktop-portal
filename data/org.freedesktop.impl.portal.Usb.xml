<?xml version="1.0"?>
<!--
 Copyright (C) 2023 Georges Basile Stavracas Neto <georges.stavracas@gmail.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library. If not, see <http://www.gnu.org/licenses/>.

 Author: Georges Basile Stavracas Neto <georges.stavracas@gmail.com>
-->

<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <!--
      org.freedesktop.impl.portal.Usb:
      @short_description: USB portal backend interface

      This portal lets applications register global shortcuts so they can
      act regardless of the system state upon an input event.

      This documentation describes version 1 of this interface.
  -->
  <interface name="org.freedesktop.impl.portal.Usb">

    <!--
        CreateSession:
        @handle: Object path for the :ref:`org.freedesktop.impl.portal.Request` object representing this call
        @session_handle: Object path for the :ref:`org.freedesktop.impl.portal.Session` object representing the session being created
        @app_id: App id of the application
        @options: Vardict with optional further information
        @response: Numeric Request response
        @results: Vardict with the results of the call

        Create a global shortcuts session.

        The @options vardict supports all documented keys for
        org.freedesktop.portal.Usb.CreateSession(), and also the following
        backend-specific keys:

        * ``matches_permission_store`` (``b``)

          Whether the app has permission to create USB sessions similar to
          this. Usually this means that the app is requesting a USB session
          with the same access mode, and the user has previously granted the
          permission to do so.

          It is recommended that backends don't ask the user again if the
          permission matches.

        The following results get returned via the @results vardict:

        * ``result`` (``u``)

            The choice that the user made regarding the USB session:

            - ``0``: Forbid creating the USB session
            - ``1``: Allow creating the USB session
            - ``2``: Allow this particular USB session
    -->
    <method name="CreateSession">
      <arg type="o" name="handle" direction="in"/>
      <arg type="o" name="session_handle" direction="in"/>
      <arg type="s" name="app_id" direction="in"/>
      <arg type="s" name="parent_window" direction="in"/>
      <arg type="a{sv}" name="options" direction="in"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.In4" value="QVariantMap"/>
      <arg type="u" name="response" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out1" value="QVariantMap"/>
      <arg type="a{sv}" name="results" direction="out"/>
    </method>

    <!--
        AccessDevices:
        @handle: Object path for the :ref:`org.freedesktop.impl.portal.Request` object representing this call
        @session_handle: Object path for the :ref:`org.freedesktop.impl.portal.Session` object representing the session
        @parent_window: Identifier for the application window, see :ref:`Common Conventions <window-identifiers>`.
        @app_id: App id of the application
        @devices: Array of device identifiers, and options for each device
        @options: Vardict with optional further information
        @response: Numeric Request response
        @results: Vardict with the results of the call

        Opens the given device node.

        Each element of the @devices array contains the device ID, and the
        following keys:

        * ``writable`` (``b``)

          Whether the device will be opened in read-write or read-only mode.
          Default: False

        There are no supported keys in the @options vardict.

        The following results get returned via the @results vardict:

        * ``devices`` (``a(sa{sv})``)

          Which devices to open

     -->
    <method name="AccessDevices">
      <arg type="o" name="handle" direction="in"/>
      <arg type="o" name="session_handle" direction="in"/>
      <arg type="s" name="parent_window" direction="in"/>
      <arg type="s" name="app_id" direction="in"/>
      <arg type="a(sa{sv}a{sv})" name="devices" direction="in"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.In4" value="QVariantMap"/>
      <arg type="a{sv}" name="options" direction="in"/>
      <arg type="u" name="response" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out1" value="QVariantMap"/>
      <arg type="a{sv}" name="results" direction="out"/>
    </method>

    <property name="version" type="u" access="read"/>
  </interface>
</node>
