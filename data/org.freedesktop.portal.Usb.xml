<?xml version="1.0"?>
<!--
 Copyright (C) 2020 Endless OS Foundation LLC

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library. If not, see <http://www.gnu.org/licenses/>.

 Author: Ryan Gonzalez <rymg19+github@gmail.com>
-->

<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">
  <!--
      org.freedesktop.portal.Usb:
      @short_description: Portal for USB device access

      This interface lets sandboxed applications monitor and request
      access to connected USB devices.

      Applications should prefer specialized portals for specific
      device types, such as the Camera portal for cameras.

      This documentation describes version 1 of this interface.
    -->
  <interface name="org.freedesktop.portal.Usb">

    <!--
        CreateSession:
        @parent_window: Identifier for the application window, see :ref:`Common Conventions <window-identifiers>`
        @options: Vardict with optional further information
        @handle: Object path for the :ref:`org.freedesktop.portal.Request` object representing this call

        Creates an USB session.

        Supported keys in the @options vardict include:

        * ``handle_token`` (``s``)

          A string that will be used as the last element of the @handle. Must be a valid
          object path element. See the :ref:`org.freedesktop.portal.Request` documentation
          for more information about the @handle.

        * ``session_handle_token`` (``s``)

          A string that will be used as the last element of the session handle. Must be a valid
          object path element. See the #org.freedesktop.portal.Session documentation for
          more information about the session handle.

        * ``reason`` (``s``)

          User-visible reason for requesting access to USB devices.

        * ``access_mode`` (``s``)

          How the app wants to access devices. The following values are supported:

          - ``listed-devices``: The app provides a specific list of devices
          - ``all``: The app wants access to all devices

        * ``devices`` (``aa{sv}``)

          The list of devices the app is interested in receiving data and
          monitoring. Required for apps that requested permissions with
          "listed-devices" access mode.

          Each element of this array is a vardict with the following keys:

          * ``vendor_id`` (``q``)

            The vendor ID of the USB device. This field is required.

          * ``product_id`` (``q``)

            The product / model ID of the USB device. This field is required.

        The following results get returned via the #org.freedesktop.portal.Request::Response signal:

        * ``available_devices`` (``a(sa{sv})``)

            A list of devices available to this session. See
            org.freedesktop.portal.Usb.EnumerateDevices() for the list of
            properties that the device may have.
    -->
    <method name="CreateSession">
      <arg type="s" name="parent_window" direction="in"/>
      <arg type="a{sv}" name="options" direction="in"/>
      <arg type="o" name="handle" direction="out"/>
    </method>

    <!--
        EnumerateDevices:
        @session_handle: Object path for the :ref:`org.freedesktop.portal.Session` object
        @options: Vardict with optional further information

        Enumerates all connected USB devices that this application has permission
        to see.

        The following results are returned in the @device vardict:

        * ``id`` (``s``)

          The portal-specific unique identifier of the device.

        * ``parent`` (``s``)

          Device ID of the parent device.

        * ``devnode`` (``s``)

          A string path to the device node inside the /dev filesystem. This path
          will not available inside the sandbox unless ``device=all`` is used,
          but it can still be used to distinguish between different device APIs
          (e.g. the legacy joystick API device nodes begin with "/dev/js", whereas
          evdev ones begin with "/dev/event").

        * ``readable`` (``b``)

          Whether the device can be opened for reading with
          org.freedesktop.portal.Usb.AccessDevices(). If not present, then
          it should be assumed to be false.

        * ``writable`` (``b``)

          Whether the device can be opened for writing with
          org.freedesktop.portal.Usb.AccessDevices(). If not present, then
          it should be assumed to be false.

        * ``vendor_id`` (``q``)

          USB vendor ID.

        * ``product_id`` (``q``)

          USB product / model ID.

        * ``serial`` (``s``)

          Unique device serial.

        * ``subsystem`` (``s``)

          Udev subsystem that this device is a part of.

        * ``has_joystick`` (``s``)

          Whether this device has / is a joystick.If not present, then it
          should be assumed to be false.
     -->
    <method name="EnumerateDevices">
      <arg type="o" name="session_handle" direction="in"/>
      <arg type="a{sv}" name="options" direction="in"/>
      <arg type="a(sa{sv})" name="devices" direction="out"/>
    </method>

    <!--
        AccessDevices:
        @session_handle: Object path for the :ref:`org.freedesktop.portal.Session` object
        @parent_window: Identifier for the application window, see :ref:`Common Conventions <window-identifiers>`.
        @devices: Array of device identifiers, device information, and access options
        @options: Vardict with optional further information
        @handle: Object path for the :ref:`org.freedesktop.portal.Request` object representing this call

        Opens the given device node.

        Each element of the @devices array contains the device ID, and the
        following keys:

        * ``writable`` (``b``)

          Whether the device will be opened in read-write or read-only mode.
          Default: False

        Supported keys in the @options vardict include:

        * ``handle_token`` (``s``)

          A string that will be used as the last element of the @handle. Must be a valid
          object path element. See the :ref:`org.freedesktop.portal.Request` documentation
          for more information about the @handle.

        The #org.freedesktop.portal.Request::Response signal is emitted without
        any extra information.
     -->
    <method name="AccessDevices">
      <arg type="o" name="session_handle" direction="in"/>
      <arg type="s" name="parent_window" direction="in"/>
      <arg type="a(sa{sv})" name="devices" direction="in"/>
      <arg type="a{sv}" name="options" direction="in"/>
      <arg type="o" name="handle" direction="out"/>
    </method>

    <!--
        FinishAccessDevices:
        @session_handle: Object path for the :ref:`org.freedesktop.portal.Session` object
        @options: Vardict with optional further information
        @results: Array of device ids, and the result of the access
        @finished: Whether all device results were reported

        Retrieves the file descriptors of the devices requested during
        org.freedesktop.portal.Usb.AccessDevices().

        This method can only be called once, and only after calling
        org.freedesktop.portal.Usb.AccessDevices().

        Each element of the @devices_fds array contains the device ID, and the
        following keys:

        * ``success`` (``b``)

          Whether the device access was successful or not.

        * ``fd`` (``h``)

          The file descriptor representing the device. Only present if this
          was a successful device access.

        * ``error`` (``s``)

          Error message describing why accessing the device was not
          successful. Only present if this was an failed device access.

        There are no supported keys in the @options vardict.
     -->
    <method name="FinishAccessDevices">
      <arg type="o" name="session_handle" direction="in"/>
      <arg type="a{sv}" name="options" direction="in"/>
      <arg type="a(sa{sv})" name="results" direction="out"/>
      <arg type="b" name="finished" direction="out"/>
    </method>

    <!--
        DeviceEvents:
        @session_handle: Object path for the :ref:`org.freedesktop.portal.Session` object
        @events: A list of events. See org.freedesktop.portal.Usb.EnumerateDevices() for a list of all the properties that may be present in the vardict.

        The DeviceEvents signal is emitted when one or more USB devices have
        been added, changed, or removed. This signal is only emitted for active
        sessions created with org.freedesktop.portal.Usb.CreateSession().

        Each element of the @events array is composed of the following fields:

        * ``action`` (``s``)

          Type of event that occurred. One of "add", "change", or "remove".

        * ``id`` (``s``)

          Device ID that the event occurred on.

        * ``device`` (``s``)

          Device properties attached to the ID. See
          org.freedesktop.portal.Usb.EnumerateDevices() for a list of all
          the properties that may be present in the vardict.
      -->
    <signal name="DeviceEvents">
      <arg type="o" name="session_handle" direction="out"/>
      <arg type="a(ssa{sv})" name="events" direction="out"/>
    </signal>

    <property name="version" type="u" access="read"/>
  </interface>
</node>
